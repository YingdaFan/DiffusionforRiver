import torch
import torch.nn as nn
import math

DEFAULT_W0 = 30.
########################
# Initialization methods
########################
def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # For PINNet, Raissi et al. 2019
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    # grab from upstream pytorch branch and paste here for now
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor

def __check_Linear_weight(m):
    if isinstance(m, nn.Linear):
        if hasattr(m, 'weight'):
            return True
    return False

def init_weights_trunc_normal(m):
    # For PINNet, Raissi et al. 2019
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    if __check_Linear_weight(m):
        fan_in = m.weight.size(1)
        fan_out = m.weight.size(0)
        std = math.sqrt(2.0 / float(fan_in + fan_out))
        mean = 0.
        # initialize with the same behavior as tf.truncated_normal
        # "The generated values follow a normal distribution with specified mean and
        # standard deviation, except that values whose magnitude is more than 2
        # standard deviations from the mean are dropped and re-picked."
        _no_grad_trunc_normal_(m.weight, mean, std, -2 * std, 2 * std)


def init_weights_uniform(m):
    if __check_Linear_weight(m):
        num_input = m.weight.size(-1)
        nn.init.uniform_(m.weight,-1 / num_input, 1 / num_input)


def init_weights_uniform_mfn(m, weight_scale= 1.):
    if __check_Linear_weight(m):
        num_input = m.weight.size(-1)
        nn.init.uniform_(
            m.weight,
            -math.sqrt(weight_scale / num_input), 
            math.sqrt(weight_scale / num_input)
        )


def init_weights_uniform_siren_scale(m, scale= 1e-2):
    if __check_Linear_weight(m):
        num_input = m.weight.size(-1)
        nn.init.uniform_(
            m.weight,
            -math.sqrt(6/ num_input)*scale, 
            math.sqrt(6 / num_input)*scale
        )


def init_weights_normal(m):
    if __check_Linear_weight(m):
        nn.init.kaiming_normal_(
            m.weight, 
            a=0.0, 
            nonlinearity='relu', 
            mode='fan_in'
        )


def init_weights_selu(m):
    if __check_Linear_weight(m):
        num_input = m.weight.size(-1)
        nn.init.normal_(m.weight, std=1 / math.sqrt(num_input))


def init_weights_elu(m):
    if __check_Linear_weight(m):
        num_input = m.weight.size(-1)
        nn.init.normal_(
            m.weight, 
            std=math.sqrt(1.5505188080679277) / math.sqrt(num_input)
        )


def init_weights_xavier(m):
    if __check_Linear_weight(m):
        nn.init.xavier_normal_(m.weight)


def sine_init(m, w0 = DEFAULT_W0):
    with torch.no_grad():
        if hasattr(m, 'weight'):
            num_input = m.weight.size(-1)
            # See supplement Sec. 1.5 for discussion of factor DEFAULT_W0
            m.weight.uniform_(
                -math.sqrt(6 / num_input) / w0, 
                math.sqrt(6 / num_input) / w0
            )

def first_layer_sine_init(m):
    with torch.no_grad():
        if hasattr(m, 'weight'):
            num_input = m.weight.size(-1)
            # See paper sec. 3.2, final paragraph, and supplement Sec. 1.5 for discussion of factor DEFAULT_W0
            m.weight.uniform_(-1 / num_input, 1 / num_input)

def init_bias_uniform(m):
    with torch.no_grad():
        if hasattr(m, 'bias'):
            num_input = m.weights.size(-1)
            m.bias.uniform_(-1 / num_input, 1 / num_input)

def init_bias_uniform_sqrt(m):
    with torch.no_grad():
        if hasattr(m, 'bias'):
            num_input = m.weights.size(-1)
            m.bias.uniform_(-1 / math.sqrt(num_input), 1 /  math.sqrt(num_input))